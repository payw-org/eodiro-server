const fs = require('fs')
const glob = require('glob')
const path = require('path')
const prettier = require('prettier')
const prettierRC = require('../../../../prettier.config')
const { pascalCase, camelCase } = require('change-case')

const msg = `
/**
 * Copyright 2020 jhaemin
 *
 * Refresh One API Schemas & Functions
 *
 * This file is automatically generated
 * by the script "refresh".
 * Do not modify this file manually.
 * If there comes a situation where this file
 * should move to other place,
 * please update the source "dev/refresh.js".
 */
`

/**
 * @param {string} fTSPath
 */
function getPascalName(fTSPath) {
  const fileName = path.parse(fTSPath).name.replace(/\.f$/g, '')
  const pascal = pascalCase(fileName)

  return pascal
}

/**
 * @param {string} fTSPath
 */
function importType(fTSPath) {
  const pathWithoutExt = fTSPath.replace(/\.f\.ts$/g, '')
  const schemaInterface = getPascalName(fTSPath)

  return `import { ${schemaInterface} } from '${pathWithoutExt}'
export { ${schemaInterface} } from '${pathWithoutExt}'`
}

/**
 * @param {string} fTSPath
 */
function exportFunction(fTSPath) {
  const pathWithoutExt = fTSPath.replace(/\.ts$/g, '')
  const fileName = path.parse(fTSPath).name.replace(/\.f$/g, '')
  const funcName = camelCase(fileName)

  return `export { ${funcName} } from '${pathWithoutExt}'`
}

glob('scheme/**/*.f.ts', {}, (err, files) => {
  files = files.map((file) => file.replace(/^scheme/g, '.'))

  // Interfaces
  const interfaceImports = files.map((file) => importType(file)).join('\n')
  const interfaceFile = prettier.format(
    `${msg}

${interfaceImports}

export type APIScheme = ${files.map((file) => getPascalName(file)).join(' | ')}
`,
    prettierRC
  )

  fs.writeFileSync('./scheme/index.ts', interfaceFile)

  // Functions
  const functionExports = files.map((file) => exportFunction(file)).join('\n')
  const functionExportFile = prettier.format(
    `${msg}

${functionExports}
`,
    prettierRC
  )

  fs.writeFileSync('./scheme/functions.ts', functionExportFile)
})
