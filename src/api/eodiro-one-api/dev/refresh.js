const fs = require('fs')
const util = require('util')
const glob = require('glob')
const globAsync = util.promisify(glob)
const path = require('path')
const prettier = require('prettier')
const prettierRC = require('../../../../prettier.config')
const { pascalCase, camelCase } = require('change-case')

const msg = `
/**
 * Copyright 2020 jhaemin
 *
 * Refresh One API Schemas & Functions
 *
 * This file is automatically generated
 * by the script "refresh".
 * Do not modify this file manually.
 * If there comes a situation where this file
 * should move to other place,
 * please update the source "dev/refresh.js".
 */
`

/**
 * @param {string} fTSPath
 */
function getPascalName(fTSPath) {
  const fileName = path.parse(fTSPath).name.replace(/\.f$/g, '')
  const pascal = pascalCase(fileName)

  return pascal
}

/**
 * @param {string} fTSPath
 */
function importType(fTSPath) {
  const pathWithoutExt = fTSPath.replace(/\.f\.ts$/g, '')
  const schemaInterface = getPascalName(fTSPath)

  return `import { ${schemaInterface} } from '${pathWithoutExt}'
export { ${schemaInterface} } from '${pathWithoutExt}'`
}

/**
 * @param {string} fTSPath
 */
function exportFunction(fTSPath) {
  const pathWithoutExt = fTSPath.replace(/\.ts$/g, '')
  const fileName = path.parse(fTSPath).name.replace(/\.f$/g, '')
  const funcName = camelCase(fileName)

  return `export { ${funcName} } from '${pathWithoutExt}'`
}

;(async () => {
  // New method interfaces
  const interfacesPaths = (
    await globAsync('scheme/**/*.action/interface.ts')
  ).map((path) => path.replace(/^scheme/g, '.'))
  let interfacesNames = []
  let importStmts = []
  interfacesPaths.forEach((path) => {
    const name = pascalCase(/([a-z-]*)\.action\/interface.ts$/g.exec(path)[1])
    interfacesNames.push(name)
    const pathWithoutExt = path.replace(/\.ts$/g, '')
    const stmt = `import { Interface as ${name}Raw } from '${pathWithoutExt}'
export type ${name} = ${name}Raw & { action: '${camelCase(name)}' }
`
    importStmts.push(stmt)
  })

  // New mthod functions
  const newFuncExports = (
    await globAsync('scheme/**/*.action/function.ts')
  ).map((path) => {
    return `export { default as ${camelCase(
      /([a-z-]*)\.action\/function.ts$/g.exec(path)[1]
    )} } from '${path.replace(/^scheme/g, '.').replace(/\.ts$/g, '')}'`
  })

  /*********************************************************
   *                                                       *
   * Legacy method using [api-name].ts and [api-name].f.ts *
   *                                                       *
   *********************************************************/

  let legacyFTSFiles = await globAsync('scheme/**/*.f.ts')
  legacyFTSFiles = legacyFTSFiles.map((file) => file.replace(/^scheme/g, '.'))

  // Interfaces
  const interfaceImports = legacyFTSFiles
    .map((file) => importType(file))
    .concat(importStmts)
    .join('\n')
  const interfaceFile = prettier.format(
    `${msg}

${interfaceImports}

export type APIScheme = ${legacyFTSFiles
      .map((file) => getPascalName(file))
      .concat(interfacesNames)
      .join(' | ')}
`,
    prettierRC
  )

  fs.writeFileSync('./scheme/index.ts', interfaceFile)

  // Functions
  const functionExports = legacyFTSFiles
    .map((file) => exportFunction(file))
    .concat(newFuncExports)
    .join('\n')
  const functionExportFile = prettier.format(
    `${msg}

${functionExports}
`,
    prettierRC
  )

  fs.writeFileSync('./scheme/functions.ts', functionExportFile)
})()
