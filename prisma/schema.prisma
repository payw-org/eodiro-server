generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  userId Int  @id @map(name: "user_id")
  user User @relation(fields: [userId], references: [id])

  @@map(name: "admin")
}

model Board {
  boardName String @unique @map(name: "board_name")
  id         Int    @default(autoincrement()) @id
  posts Post[]

  @@map(name: "board")
}

model CafeteriaMenu {
  campus    String
  data      String?
  servedAt DateTime @map(name: "served_at")

  @@id([campus, servedAt])
  @@map(name: "cafeteria_menu")
}

model ChangePassword {
  requestedAt DateTime @map(name: "requested_at")
  token        String
  userId      Int      @id @map(name: "user_id")
  user User @relation(fields: [userId], references: [id])

  @@index([token], name: "change_password_token")
  @@map(name: "change_password")
}

model Comment {
  body            String
  id              Int      @default(autoincrement()) @id
  postId         Int @map(name: "post_id")
  randomNickname String @map(name: "random_nickname")
  uploadedAt     DateTime @map(name: "uploaded_at")
  userId         Int @map(name: "user_id")
  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([postId], name: "post_id")
  @@index([userId], name: "user_id")
  @@map(name: "comment")
}

model CoverageMajor {
  code                   String?
  coverageCollege       String? @map(name: "coverage_college")
  name                   String                   @id
  coverageMajorLectures CoverageMajorLecture[]

  @@map(name: "coverage_major")
}

model CoverageMajorLecture {
  coverageMajor                                        String @map(name: "coverage_major")
  id                                                    Int            @default(autoincrement()) @id
  lectureId                                            Int @map(name: "lecture_id")
  coverageMajorCoverageMajorTocoverageMajorLecture CoverageMajor @relation(fields: [coverageMajor], references: [name])
  lecture Lecture @relation(fields: [lectureId], references: [id])

  @@index([coverageMajor], name: "coverage_major_lecture_coverage_major")
  @@index([lectureId], name: "coverage_major_lecture_lecture_id")
  @@map(name: "coverage_major_lecture")
}

model Device {
  activatedAt  DateTime? @map(name: "activated_at")
  deviceId     String    @unique @map(name: "device_id")
  id            Int       @default(autoincrement()) @id
  pushToken    String @map(name: "push_token")
  registeredAt DateTime @map(name: "registered_at")
  userId       Int @map(name: "user_id")
  user User @relation(fields: [userId], references: [id])

  @@index([userId], name: "user_id")
  @@map(name: "device")
}

model File {
  fileName   String @map(name: "file_name")
  id          Int         @default(autoincrement()) @id
  mime        String
  uploadedAt DateTime @map(name: "uploaded_at")
  uuid        String      @unique
  postFiles PostFile[]

  @@map(name: "file")
}

model HoneyTip {
  body            String
  createdAt      DateTime? @map(name: "created_at")
  editedAt       DateTime? @map(name: "edited_at")
  id              Int              @default(autoincrement()) @id
  isRemoved      Boolean?         @default(false) @map(name: "is_removed")
  isStarred      Boolean?         @default(false) @map(name: "is_starred")
  randomNickname String @map(name: "random_nickname")
  title           String
  topic           honey_tip_topic?
  userId         Int @map(name: "user_id")
  user User @relation(fields: [userId], references: [id])

  @@index([userId], name: "user_id")
  @@map(name: "honey_tip")
}

model Inquiry {
  answer      String?
  answeredAt DateTime? @map(name: "answered_at")
  body        String
  email       String?
  id          Int       @default(autoincrement()) @id
  title       String
  uploadedAt DateTime @map(name: "uploaded_at")
  userId     Int? @map(name: "user_id")
  user User? @relation(fields: [userId], references: [id])

  @@index([userId], name: "user_id")
  @@map(name: "inquiry")
}

model Lecture {
  building               Int?
  campus                 String?
  code                   String?
  college                String?
  course                 String?
  credit                 Int?
  grade                  Int?
  id                     Int                      @default(autoincrement()) @id
  major                  String?
  name                   String?
  note                   String?
  professor              String?
  room                   String?
  schedule               String?
  section                String?
  semester               String?
  year                   Int?
  coverageMajorLectures CoverageMajorLecture[]
  periods Period[]

  @@map(name: "lecture")
}

model NoticeNotificationsSubscription {
  id            Int      @default(autoincrement()) @id
  noticeKey    String @map(name: "notice_key")
  subscribedAt DateTime @map(name: "subscribed_at")
  userId       Int @map(name: "user_id")
  user User @relation(fields: [userId], references: [id])

  @@index([noticeKey], name: "notice_notifications_subscription_notice_key")
  @@index([userId], name: "user_id")
  @@map(name: "notice_notifications_subscription")
}

model PendingUser {
  id              Int      @default(autoincrement()) @id
  nickname        String
  password        String
  portalId       String @map(name: "portal_id")
  randomNickname String @map(name: "random_nickname")
  registeredAt   DateTime @map(name: "registered_at")
  token           String

  @@index([token], name: "pending_user_token")
  @@map(name: "pending_user")
}

model Period {
  day        String
  endH      Int @map(name: "end_h")
  endM      Int @map(name: "end_m")
  lectureId Int @map(name: "lecture_id")
  startH    Int @map(name: "start_h")
  startM    Int @map(name: "start_m")
  lecture Lecture @relation(fields: [lectureId], references: [id])

  @@id([lectureId, day, startH, startM, endH, endM])
  @@map(name: "period")
}

model Post {
  boardId        Int @map(name: "board_id")
  body            String
  editedAt       DateTime? @map(name: "edited_at")
  id              Int         @default(autoincrement()) @id
  isDeleted      Boolean?    @default(false) @map(name: "is_deleted")
  randomNickname String @map(name: "random_nickname")
  title           String
  uploadedAt     DateTime @map(name: "uploaded_at")
  userId         Int @map(name: "user_id")
  board Board @relation(fields: [boardId], references: [id])
  user User @relation(fields: [userId], references: [id])
  comments Comment[]
  postFiles PostFile[]
  postLikes PostLike[]

  @@index([boardId], name: "board_id")
  @@index([userId], name: "user_id")
  @@map(name: "post")
}

model PostFile {
  fileId Int @map(name: "file_id")
  id      Int  @default(autoincrement()) @id
  postId Int @map(name: "post_id")
  file File @relation(fields: [fileId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@index([fileId], name: "file_id")
  @@index([postId], name: "post_id")
  @@map(name: "post_file")
}

model PostLike {
  postId Int @map(name: "post_id")
  userId Int @map(name: "user_id")
  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([userId, postId])
  @@index([postId], name: "post_id")
  @@map(name: "post_like")
}

model RefreshToken {
  id                  Int     @default(autoincrement()) @id
  manuallyChangedAt Int? @map(name: "manually_changed_at")
  token               String?
  userId             Int? @map(name: "user_id")
  user User? @relation(fields: [userId], references: [id])

  @@index([userId], name: "user_id")
  @@map(name: "refresh_token")
}

model User {
  id                                Int                                 @default(autoincrement()) @id
  nickname                          String
  password                          String
  portalId                         String @map(name: "portal_id")
  randomNickname                   String @map(name: "random_nickname")
  registeredAt                     DateTime @map(name: "registered_at")
  admins Admin[]
  changePasswords ChangePassword[]
  comments Comment[]
  devices Device[]
  honeyTips HoneyTip[]
  inquiries Inquiry[]
  noticeNotificationsSubscriptions NoticeNotificationsSubscription[]
  posts Post[]
  postLikes PostLike[]
  refreshTokens RefreshToken[]

  @@index([portalId], name: "user_portal_id")
  @@map(name: "user")
}

enum honey_tip_topic {
  example1
  etexample2
}