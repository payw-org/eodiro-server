generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  userId Int  @id @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("admin")
}

model CafeteriaMenu {
  campus   String
  servedAt DateTime @map("served_at")
  data     Json?

  @@id([campus, servedAt])
  @@map("cafeteria_menu")
}

model ChangePassword {
  userId      Int      @id @map("user_id")
  token       String   @unique
  requestedAt DateTime @map("requested_at")
  user        User     @relation(fields: [userId], references: [id])

  @@index([token], name: "change_password_token")
  @@map("change_password")
}

model CoverageMajor {
  coverageCollege       String?                @map("coverage_college")
  name                  String
  code                  String                 @id
  coverageMajorLectures CoverageMajorLecture[] @relation("coverage_majorTocoverage_major_lecture")

  @@map("coverage_major")
}

model CoverageMajorLecture {
  lectureId     String        @map("lecture_id")
  majorCode     String        @map("major_code")
  lecture       Lecture       @relation(fields: [lectureId], references: [id])
  coverageMajor CoverageMajor @relation("coverage_majorTocoverage_major_lecture", fields: [majorCode], references: [code])

  @@id([lectureId, majorCode])
  @@index([lectureId], name: "coverage_major_lecture_lecture_id")
  @@index([majorCode], name: "coverage_major_lecture_major_code")
  @@map("coverage_major_lecture")
}

model Lecture {
  id                    String                 @id
  year                  Int?
  semester              String?
  campus                String?
  college               String?
  major                 String?
  grade                 Int?
  credit                Int?
  course                String?
  section               String?
  code                  String?
  name                  String?
  professor             String?
  schedule              String?
  building              Int?
  room                  String?
  note                  String?
  coverageMajorLectures CoverageMajorLecture[]
  periods               Period[]

  @@map("lecture")
}

model LiveChat {
  id             Int      @default(autoincrement())
  message        String
  createdAt      DateTime @map("created_at")
  userId         Int      @map("user_id")
  randomNickname String   @map("random_nickname")
  user           User     @relation(fields: [userId], references: [id])

  @@id([id, userId])
  @@index([userId], name: "user_id")
  @@map("live_chat")
}

model NoticeNotificationsSubscription {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  noticeKey    String   @map("notice_key")
  subscribedAt DateTime @map("subscribed_at")
  user         User     @relation(fields: [userId], references: [id])

  @@index([noticeKey], name: "notice_notifications_subscription_notice_key")
  @@index([userId], name: "user_id")
  @@map("notice_notifications_subscription")
}

model PendingUser {
  id             Int      @id @default(autoincrement())
  portalId       String   @unique @map("portal_id")
  password       String
  nickname       String   @unique
  randomNickname String   @map("random_nickname")
  joinedAt       DateTime @map("joined_at")
  token          String   @unique

  @@map("pending_user")
}

model Period {
  lectureId String  @map("lecture_id")
  day       String
  startH    Int     @map("start_h")
  startM    Int     @map("start_m")
  endH      Int     @map("end_h")
  endM      Int     @map("end_m")
  lecture   Lecture @relation(fields: [lectureId], references: [id])

  @@id([lectureId, day, startH, startM, endH, endM])
  @@index([lectureId], name: "period_lecture_id")
  @@map("period")
}

model User {
  id                               Int                               @id @default(autoincrement())
  portalId                         String                            @unique @map("portal_id")
  password                         String
  nickname                         String                            @unique
  randomNickname                   String                            @map("random_nickname")
  joinedAt                         DateTime                          @map("joined_at")
  refreshToken                     String?                           @map("refresh_token")
  admins                           Admin?
  changePassword                   ChangePassword?
  communityBoards                  CommunityBoard[]                  @relation("community_boardTouser")
  communityBoardCandidates         CommunityBoardCandidate[]         @relation("community_board_candidateTouser")
  communityBoardCandidateVotes     CommunityBoardCandidateVote[]     @relation("community_board_candidate_voteTouser")
  communityBoardPins               CommunityBoardPin[]               @relation("community_board_pinTouser")
  communityComments                CommunityComment[]                @relation("community_commentTouser")
  communityPosts                   CommunityPost[]                   @relation("community_postTouser")
  communityPostBookmarks           CommunityPostBookmark[]           @relation("community_post_bookmarkTouser")
  communityPostLikes               CommunityPostLike[]               @relation("community_post_likeTouser")
  communitySubcomments             CommunitySubcomment[]             @relation("community_subcommentTouser")
  liveChats                        LiveChat[]
  noticeNotificationsSubscriptions NoticeNotificationsSubscription[]
  pushes                           Push[]                            @relation("pushTouser")

  @@map("user")
}

model CommunityBoard {
  id                 Int                 @id @default(autoincrement())
  name               String              @default("")
  description        String?
  priority           Int                 @default(0)
  isDeleted          Boolean             @default(false) @map("is_deleted")
  createdBy          Int                 @map("created_by")
  createdAt          DateTime            @map("created_at")
  activeAt           DateTime?           @map("active_at")
  user               User                @relation("community_boardTouser", fields: [createdBy], references: [id])
  communityBoardPins CommunityBoardPin[] @relation("community_boardTocommunity_board_pin")
  communityPosts     CommunityPost[]

  @@index([createdBy], name: "created_by")
  @@map("community_board")
}

model CommunityPost {
  id                     Int                     @id @default(autoincrement())
  boardId                Int                     @map("board_id")
  userId                 Int                     @map("user_id")
  title                  String
  body                   String
  randomNickname         String                  @map("random_nickname")
  likesCount             Int                     @default(0) @map("likes_count")
  commentsCount          Int                     @default(0) @map("comments_count")
  bookmarksCount         Int                     @default(0) @map("bookmarks_count")
  postedAt               DateTime                @map("posted_at")
  editedAt               DateTime?               @map("edited_at")
  isDeleted              Boolean                 @default(false) @map("is_deleted")
  communityBoard         CommunityBoard          @relation(fields: [boardId], references: [id])
  user                   User                    @relation("community_postTouser", fields: [userId], references: [id])
  communityComments      CommunityComment[]      @relation("community_commentTocommunity_post")
  communityPostBookmarks CommunityPostBookmark[] @relation("community_postTocommunity_post_bookmark")
  communityPostLikes     CommunityPostLike[]     @relation("community_postTocommunity_post_like")
  communitySubcomments   CommunitySubcomment[]   @relation("community_postTocommunity_subcomment")

  @@index([boardId], name: "board_id")
  @@index([userId], name: "user_id")
  @@map("community_post")
}

model CommunityComment {
  id                   Int                   @id @default(autoincrement())
  postId               Int                   @map("post_id")
  userId               Int                   @map("user_id")
  randomNickname       String                @default("") @map("random_nickname")
  body                 String
  commentedAt          DateTime              @map("commented_at")
  isDeleted            Boolean               @default(false) @map("is_deleted")
  communityPost        CommunityPost         @relation("community_commentTocommunity_post", fields: [postId], references: [id])
  user                 User                  @relation("community_commentTouser", fields: [userId], references: [id])
  communitySubcomments CommunitySubcomment[] @relation("community_commentTocommunity_subcomment")

  @@index([postId], name: "post_id")
  @@index([userId], name: "user_id")
  @@map("community_comment")
}

model CommunityPostLike {
  userId        Int           @map("user_id")
  postId        Int           @map("post_id")
  communityPost CommunityPost @relation("community_postTocommunity_post_like", fields: [postId], references: [id])
  user          User          @relation("community_post_likeTouser", fields: [userId], references: [id])

  @@id([userId, postId])
  @@index([postId], name: "post_id")
  @@map("community_post_like")
}

model CommunityPostBookmark {
  userId        Int           @map("user_id")
  postId        Int           @map("post_id")
  communityPost CommunityPost @relation("community_postTocommunity_post_bookmark", fields: [postId], references: [id])
  user          User          @relation("community_post_bookmarkTouser", fields: [userId], references: [id])

  @@id([userId, postId])
  @@index([postId], name: "post_id")
  @@map("community_post_bookmark")
}

model CommunitySubcomment {
  id               Int              @id @default(autoincrement())
  userId           Int              @map("user_id")
  postId           Int              @map("post_id")
  commentId        Int              @map("comment_id")
  randomNickname   String           @default("") @map("random_nickname")
  body             String
  subcommentedAt   DateTime         @map("subcommented_at")
  isDeleted        Boolean          @default(false) @map("is_deleted")
  communityComment CommunityComment @relation("community_commentTocommunity_subcomment", fields: [commentId], references: [id])
  communityPost    CommunityPost    @relation("community_postTocommunity_subcomment", fields: [postId], references: [id])
  user             User             @relation("community_subcommentTouser", fields: [userId], references: [id])

  @@index([commentId], name: "comment_id")
  @@index([postId], name: "post_id")
  @@index([userId], name: "user_id")
  @@map("community_subcomment")
}

model Push {
  userId        Int       @map("user_id")
  expoPushToken String    @id @default("") @map("expo_push_token")
  registeredAt  DateTime  @map("registered_at")
  activeAt      DateTime? @map("active_at")
  user          User      @relation("pushTouser", fields: [userId], references: [id])

  @@index([userId], name: "user_id")
  @@map("push")
}

model CommunityBoardCandidate {
  id                           Int                           @id @default(autoincrement())
  name                         String                        @default("")
  description                  String?
  createdBy                    Int                           @map("created_by")
  createdAt                    DateTime                      @map("created_at")
  user                         User                          @relation("community_board_candidateTouser", fields: [createdBy], references: [id])
  communityBoardCandidateVotes CommunityBoardCandidateVote[] @relation("community_board_candidateTocommunity_board_candidate_vote")

  @@index([createdBy], name: "created_by")
  @@map("community_board_candidate")
}

model CommunityBoardCandidateVote {
  boardCandidateId        Int                     @map("board_candidate_id")
  userId                  Int                     @map("user_id")
  communityBoardCandidate CommunityBoardCandidate @relation("community_board_candidateTocommunity_board_candidate_vote", fields: [boardCandidateId], references: [id])
  user                    User                    @relation("community_board_candidate_voteTouser", fields: [userId], references: [id])

  @@id([boardCandidateId, userId])
  @@index([userId], name: "user_id")
  @@map("community_board_candidate_vote")
}

model CommunityBoardPin {
  userId         Int            @map("user_id")
  boardId        Int            @map("board_id")
  communityBoard CommunityBoard @relation("community_boardTocommunity_board_pin", fields: [boardId], references: [id])
  user           User           @relation("community_board_pinTouser", fields: [userId], references: [id])

  @@id([userId, boardId])
  @@index([boardId], name: "board_id")
  @@map("community_board_pin")
}
