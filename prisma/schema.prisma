generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  userId Int  @id @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("admin")
}

model Board {
  boardName String @map("board_name") @unique
  id        Int    @default(autoincrement()) @id
  posts     Post[]

  @@map("board")
}

model CafeteriaMenu {
  campus   String
  data     String?
  servedAt DateTime @map("served_at")

  @@id([campus, servedAt])
  @@map("cafeteria_menu")
}

model ChangePassword {
  requestedAt DateTime @map("requested_at")
  token       String
  userId      Int      @id @map("user_id")
  user        User     @relation(fields: [userId], references: [id])

  @@index([token], name: "change_password_token")
  @@map("change_password")
}

model Comment {
  body           String
  id             Int      @default(autoincrement()) @id
  postId         Int      @map("post_id")
  randomNickname String   @map("random_nickname")
  uploadedAt     DateTime @map("uploaded_at")
  userId         Int      @map("user_id")
  post           Post     @relation(fields: [postId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@index([postId], name: "post_id")
  @@index([userId], name: "user_id")
  @@map("comment")
}

model CoverageMajor {
  code                  String?
  coverageCollege       String?                @map("coverage_college")
  name                  String                 @id
  coverageMajorLectures CoverageMajorLecture[]

  @@map("coverage_major")
}

model CoverageMajorLecture {
  coverageMajor                                    String        @map("coverage_major")
  id                                               Int           @default(autoincrement()) @id
  lectureId                                        Int           @map("lecture_id")
  coverageMajorCoverageMajorTocoverageMajorLecture CoverageMajor @relation(fields: [coverageMajor], references: [name])
  lecture                                          Lecture       @relation(fields: [lectureId], references: [id])

  @@index([coverageMajor], name: "coverage_major_lecture_coverage_major")
  @@index([lectureId], name: "coverage_major_lecture_lecture_id")
  @@map("coverage_major_lecture")
}

model Device {
  activatedAt  DateTime? @map("activated_at")
  deviceId     String    @map("device_id") @unique
  id           Int       @default(autoincrement()) @id
  pushToken    String    @map("push_token")
  registeredAt DateTime  @map("registered_at")
  userId       Int       @map("user_id")
  user         User      @relation(fields: [userId], references: [id])

  @@index([userId], name: "user_id")
  @@map("device")
}

model File {
  fileName   String     @map("file_name")
  id         Int        @default(autoincrement()) @id
  mime       String
  uploadedAt DateTime   @map("uploaded_at")
  uuid       String     @unique
  postFiles  PostFile[]

  @@map("file")
}

model Inquiry {
  answer     String?
  answeredAt DateTime? @map("answered_at")
  body       String
  email      String?
  id         Int       @default(autoincrement()) @id
  title      String
  uploadedAt DateTime  @map("uploaded_at")
  userId     Int?      @map("user_id")
  user       User?     @relation(fields: [userId], references: [id])

  @@index([userId], name: "user_id")
  @@map("inquiry")
}

model Lecture {
  building              Int?
  campus                String?
  code                  String?
  college               String?
  course                String?
  credit                Int?
  grade                 Int?
  id                    Int                    @default(autoincrement()) @id
  major                 String?
  name                  String?
  note                  String?
  professor             String?
  room                  String?
  schedule              String?
  section               String?
  semester              String?
  year                  Int?
  coverageMajorLectures CoverageMajorLecture[]
  periods               Period[]

  @@map("lecture")
}

model NoticeNotificationsSubscription {
  id           Int      @default(autoincrement()) @id
  noticeKey    String   @map("notice_key")
  subscribedAt DateTime @map("subscribed_at")
  userId       Int      @map("user_id")
  user         User     @relation(fields: [userId], references: [id])

  @@index([noticeKey], name: "notice_notifications_subscription_notice_key")
  @@index([userId], name: "user_id")
  @@map("notice_notifications_subscription")
}

model PendingUser {
  id             Int      @default(autoincrement()) @id
  nickname       String
  password       String
  portalId       String   @map("portal_id")
  randomNickname String   @map("random_nickname")
  registeredAt   DateTime @map("registered_at")
  token          String

  @@index([token], name: "pending_user_token")
  @@map("pending_user")
}

model Period {
  day       String
  endH      Int     @map("end_h")
  endM      Int     @map("end_m")
  lectureId Int     @map("lecture_id")
  startH    Int     @map("start_h")
  startM    Int     @map("start_m")
  lecture   Lecture @relation(fields: [lectureId], references: [id])

  @@id([lectureId, day, startH, startM, endH, endM])
  @@map("period")
}

model Post {
  boardId        Int        @map("board_id")
  body           String
  editedAt       DateTime?  @map("edited_at")
  id             Int        @default(autoincrement()) @id
  isDeleted      Boolean?   @default(false) @map("is_deleted")
  randomNickname String     @map("random_nickname")
  title          String
  uploadedAt     DateTime   @map("uploaded_at")
  userId         Int        @map("user_id")
  board          Board      @relation(fields: [boardId], references: [id])
  user           User       @relation(fields: [userId], references: [id])
  comments       Comment[]
  postFiles      PostFile[]
  postLikes      PostLike[]

  @@index([boardId], name: "board_id")
  @@index([userId], name: "user_id")
  @@map("post")
}

model PostFile {
  fileId Int  @map("file_id")
  id     Int  @default(autoincrement()) @id
  postId Int  @map("post_id")
  file   File @relation(fields: [fileId], references: [id])
  post   Post @relation(fields: [postId], references: [id])

  @@index([fileId], name: "file_id")
  @@index([postId], name: "post_id")
  @@map("post_file")
}

model PostLike {
  postId Int  @map("post_id")
  userId Int  @map("user_id")
  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([userId, postId])
  @@index([postId], name: "post_id")
  @@map("post_like")
}

model RefreshToken {
  id                Int     @default(autoincrement()) @id
  manuallyChangedAt Int?    @map("manually_changed_at")
  token             String?
  userId            Int?    @map("user_id")
  user              User?   @relation(fields: [userId], references: [id])

  @@index([userId], name: "user_id")
  @@map("refresh_token")
}

model Tip {
  body           String
  createdAt      DateTime?     @map("created_at")
  editedAt       DateTime?     @map("edited_at")
  id             Int           @default(autoincrement()) @id
  isRemoved      Boolean?      @default(false) @map("is_removed")
  isStarred      Boolean?      @default(false) @map("is_starred")
  randomNickname String        @map("random_nickname")
  title          String
  topic          TipTopic?
  userId         Int           @map("user_id")
  user           User          @relation(fields: [userId], references: [id])
  tipBookmarks   TipBookmark[]
  tipLikes       TipLike[]

  @@index([userId], name: "user_id")
  @@map("tip")
}

model TipBookmark {
  id     Int  @default(autoincrement())
  tipId  Int  @map("tip_id")
  userId Int  @map("user_id")
  tip    Tip  @relation(fields: [tipId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([id, userId, tipId])
  @@index([tipId], name: "tip_id")
  @@index([userId], name: "user_id")
  @@map("tip_bookmark")
}

model TipLike {
  id     Int  @default(autoincrement())
  tipId  Int  @map("tip_id")
  userId Int  @map("user_id")
  tip    Tip  @relation(fields: [tipId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([id, userId, tipId])
  @@index([tipId], name: "tip_id")
  @@index([userId], name: "user_id")
  @@map("tip_like")
}

model User {
  id                               Int                               @default(autoincrement()) @id
  nickname                         String
  password                         String
  portalId                         String                            @map("portal_id")
  randomNickname                   String                            @map("random_nickname")
  registeredAt                     DateTime                          @map("registered_at")
  admins                           Admin[]
  changePasswords                  ChangePassword[]
  comments                         Comment[]
  devices                          Device[]
  inquiries                        Inquiry[]
  noticeNotificationsSubscriptions NoticeNotificationsSubscription[]
  posts                            Post[]
  postLikes                        PostLike[]
  refreshTokens                    RefreshToken[]
  tips                             Tip[]
  tipBookmarks                     TipBookmark[]
  tipLikes                         TipLike[]

  @@index([portalId], name: "user_portal_id")
  @@map("user")
}

enum TipTopic {
  school
  interview
  etc

   @@map(name: "tip_topic")
}
