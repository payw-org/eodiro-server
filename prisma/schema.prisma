generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  user_id Int  @id
  user    User @relation(fields: [user_id], references: [userId])
}

model Board {
  boardId   Int    @default(autoincrement()) @id
  boardName String @default("") @unique
  posts     Post[]
}

model CafeteriaMenu {
  campus   String
  data     String?
  servedAt DateTime

  @@id([campus, servedAt])
}

model ChangePassword {
  requestedAt DateTime
  token       String
  userId      Int      @id
  user        User     @relation(fields: [userId], references: [userId])

  @@index([token], name: "change_password_token")
}

model Comment {
  body           String
  commentId      Int      @default(autoincrement()) @id
  postId         Int
  randomNickname String   @default("")
  uploadedAt     DateTime
  userId         Int
  post           Post     @relation(fields: [postId], references: [postId])
  user           User     @relation(fields: [userId], references: [userId])

  @@index([postId], name: "post_id")
  @@index([userId], name: "user_id")
}

model CoverageMajor {
  code            String?
  coverageCollege String?
  name            String  @id
}

model CoverageMajorLecture {
  coverageMajor          String @default("")
  coverageMajorLectureId Int    @default(autoincrement()) @id
  lectureId              Int
}

model File {
  fileId     Int        @default(autoincrement()) @id
  fileName   String     @default("")
  mime       String
  uploadedAt DateTime
  uuid       String     @unique
  postFiles  PostFile[]
}

model Inquiry {
  answer     String?
  answeredAt DateTime?
  body       String
  email      String?
  inquiryId  Int       @default(autoincrement()) @id
  title      String
  uploadedAt DateTime
  userId     Int?
  user       User?     @relation(fields: [userId], references: [userId])

  @@index([userId], name: "user_id")
}

model Lecture {
  building  Int?
  campus    String?
  code      String?
  college   String?
  course    String?
  credit    Int?
  grade     Int?
  lectureId Int      @default(autoincrement()) @id
  major     String?
  name      String?
  note      String?
  professor String?
  room      String?
  schedule  String?
  section   String?
  semester  String?
  year      Int?
  periods   Period[]
}

model PendingUser {
  nickname       String
  password       String
  pendingUserId  Int      @default(autoincrement()) @id
  portalId       String   @default("")
  randomNickname String   @default("")
  registeredAt   DateTime
  token          String

  @@index([token], name: "pending_user_token")
}

model Period {
  day       String
  endH      Int
  endM      Int
  lectureId Int
  startH    Int
  startM    Int
  lecture   Lecture @relation(fields: [lectureId], references: [lectureId])

  @@id([lectureId, day, startH, startM, endH, endM])
}

model Post {
  boardId        Int
  body           String
  editedAt       DateTime?
  isDeleted      Boolean?   @default(false)
  postId         Int        @default(autoincrement()) @id
  randomNickname String     @default("")
  title          String
  uploadedAt     DateTime
  userId         Int
  board          Board      @relation(fields: [boardId], references: [boardId])
  user           User       @relation(fields: [userId], references: [userId])
  comments       Comment[]
  postFiles      PostFile[]
  postLikes      PostLike[]

  @@index([boardId], name: "board_id")
  @@index([userId], name: "user_id")
}

model PostFile {
  fileId Int
  postId Int
  file   File @relation(fields: [fileId], references: [fileId])
  post   Post @relation(fields: [postId], references: [postId])

  @@id([postId, fileId])
  @@index([fileId], name: "fk_post_file_file_id")
}

model PostLike {
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [postId])
  user   User @relation(fields: [userId], references: [userId])

  @@id([userId, postId])
  @@index([postId], name: "post_id")
}

model RefreshToken {
  manuallyChangedAt Int?
  refreshTokenId    Int     @default(autoincrement()) @id
  token             String?
  userId            Int?
  user              User?   @relation(fields: [userId], references: [userId])

  @@index([userId], name: "user_id")
}

model User {
  nickname        String           @unique
  password        String
  portalId        String           @default("") @unique
  randomNickname  String           @default("")
  registeredAt    DateTime
  userId          Int              @default(autoincrement()) @id
  admins          Admin[]
  changePasswords ChangePassword[]
  comments        Comment[]
  inquiries       Inquiry[]
  posts           Post[]
  postLikes       PostLike[]
  refreshTokens   RefreshToken[]
}
